#!/bin/bash
#==============FASE DE CONSTRUCCION IMAGEN Y ENVIO A REGISTRY=============
mvn -f ../cima-comun/pom.xml clean install
mvn clean package

#comprobamos si existe proxy en donde se este construyendo la imagen
#NOTA: verificar si cambia la definicion "http proxy" con la version de docker que se este utilizando
#En dado caso, ajustar el parametro.
CHECK_PROXY="$(docker info | grep -i 'http proxy')"
if [ "$CHECK_PROXY" ]; then
	DOCKER_PROXY=$(echo $CHECK_PROXY | awk -F': ' '{print $NF}')
	docker build --build-arg http_proxy=$DOCKER_PROXY -f src/main/docker/Dockerfile -t registry:5000/cima-mspocws .
else 
	docker build -f src/main/docker/Dockerfile -t registry:5000/cima-mspocws .
fi

docker push registry:5000/cima-mspocws



#==============FASE DE LIMPIEZA DE CAPAS EN FS Y EN REGISTRY===============
#Eliminamos capas de construcciones anteriores. Para limpieza en fs en local
docker rmi $(docker images -aq -f dangling=true)

#Eliminamos capas desasignadas en registry. Este proceso es para limpieza en registry local
#de docker: (https://docs.docker.com/registry/) y es el estandar para el API v2
#Nota: verificar operacion y/o documentacion para limpieza sobre para el tipo de registry 
#que se este utilizando segun sea el caso (docker hub, nexus, etc).
docker exec registry bin/registry garbage-collect /etc/docker/registry/config.yml -m
docker exec registry find /var/lib/registry -type d -depth -exec rmdir -p {} + 2>/dev/null



#======================FASE DE DESPLIEGUE EN CLUSTER========================
#verificamos que la aplicacion ya exista para que no la parche al primer despliegue POR ENTORNO
CIMA_DEV=`kubectl get deployments -n=cima-dev | grep -q cima-mspocws-app && echo true || echo false`
CIMA_TEST=`kubectl get deployments -n=cima-test | grep -q cima-mspocws-app && echo true || echo false`

kubectl apply -f src/main/docker/kubernetes/

#si existe la aplicacion la parcha y se actualiza
if [ "$CIMA_DEV" == true ]; then
	 kubectl patch deployment cima-mspocws-app -p '{"spec":{"template":{"metadata":{"labels": { "buildate" : "'$(date '+%d-%m-%Y_%H.%M.%S.%3N')'", "version" : "latest"}}}}}' -n=cima-dev
fi

if [ "$CIMA_TEST" == true ]; then
	 kubectl patch deployment cima-mspocws-app -p '{"spec":{"template":{"metadata":{"labels": { "buildate" : "'$(date '+%d-%m-%Y_%H.%M.%S.%3N')'", "version" : "latest"}}}}}' -n=cima-test
fi