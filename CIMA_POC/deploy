#!/bin/bash

./buildimg

#Eliminamos capas desasignadas en registry. Este proceso es para limpieza en registry local
#de docker: (https://docs.docker.com/registry/) desplegado dentro del cluster para el API v2
#Nota: verificar operacion y/o documentacion para limpieza sobre para el tipo de registry 
#que se este utilizando segun sea el caso (docker hub, nexus, etc).
kubectl exec deploy/registry -n cima-registry -- bin/registry garbage-collect /etc/docker/registry/config.yml -m
kubectl exec deploy/registry -n cima-registry -- find /var/lib/registry -type d -depth -exec rmdir -p {} + 2>/dev/null



#======================FASE DE DESPLIEGUE EN CLUSTER========================
#verificamos que la aplicacion ya exista para que no la parche al primer despliegue POR ENTORNO
CIMA_DEV=`kubectl get deployments -n=cima-dev | grep -q cima-mspocws-app && echo true || echo false`
CIMA_TEST=`kubectl get deployments -n=cima-test | grep -q cima-mspocws-app && echo true || echo false`

kubectl apply -f Modulos/cima-mspocws/src/main/docker/kubernetes/

#si existe la aplicacion la parcha y se actualiza
if [ "$CIMA_DEV" == true ]; then
	 kubectl patch deployment cima-mspocws-app -p '{"spec":{"template":{"metadata":{"labels": { "buildate" : "'$(date '+%d-%m-%Y_%H.%M.%S.%3N')'", "version" : "latest"}}}}}' -n=cima-dev
fi

if [ "$CIMA_TEST" == true ]; then
	 kubectl patch deployment cima-mspocws-app -p '{"spec":{"template":{"metadata":{"labels": { "buildate" : "'$(date '+%d-%m-%Y_%H.%M.%S.%3N')'", "version" : "latest"}}}}}' -n=cima-test
fi
